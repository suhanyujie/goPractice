package main

func main() {

}


/**
## 字典的操作和约束
* 和PHP中的关联数组一样，底层都是哈希表，将键通过哈希函数将其转换为哈希值
* 一个哈希表会持有一定数量的桶，也称哈希桶，这些哈希桶会均匀的储存其所属哈希表收纳的键-元素对
* 在go语言规范中，键类型的值之间必须可以施加操作符`==`和`!=`，也就是说键类型的值必须要支持判等操作
* 不同值的哈希值是可能相同的，这叫"哈希碰撞"。
* 在查找map值时，先比较键的哈希值是否一致，如果一致，再比较实际的键值
* 在字典中，把键值转换为哈希值，以及键值与哈希桶中键值的比较 是2个比较耗时的操作
* "求哈希"和"判等"操作的速度越快，这个类型就越适合作为键的类型
>对于所有的基本类型、指针类型，以及数组类型、结构体类型和接口类型，Go 语言都有一套算法与之对应。这套算法中就包含了哈希和判等。以求哈希的操作为例，宽度越小的类型速度通常越快。对于布尔类型、整数类型、浮点数类型、复数类型和指针类型来说都是如此。对于字符串类型，由于它的宽度是不定的，所以要看它的值的具体长度，长度越短求哈希越快。
>看高级类型。对数组类型的值求哈希实际上是依次求得它的每个元素的哈希值并进行合并，所以速度就取决于它的元素类型以及它的长度。细则同上。

* 把接口类型作为字典的键类型最危险
* 我们在一个值为nil的字典上做任何操作都不会引起错误。当我们试图在一个值为nil的字典中添加键 - 元素对的时候，Go 语言的运行时系统就会立即抛出一个 panic
* map操作不是并发安全的
* 判断一个操作是否是原子的可以使用 go run race 命令做数据的竞争检测



## 参考资料
* 原文地址 https://time.geekbang.org/column/article/14123

 */